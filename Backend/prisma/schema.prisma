// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BASIC
  VERIFIED
  MERCHANT
  ADMIN
}

enum ProductCategory {
  PRODUCE
  DAIRY
  BUTCHER
  GROCERY
}

enum ContributionType {
  PRICE_UPDATE
  PRICE_CONFIRMATION
  AVAILABILITY_UPDATE
  NEW_PRODUCT
  PRODUCT_CORRECTION
}

enum NotificationType {
  PRICE_CHANGE
  AVAILABILITY_CHANGE
  PRODUCT_UPDATE
}

model User {
  id            String                @id @default(uuid())
  email         String                @unique
  password      String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  role          Role                  @default(BASIC)
  profile       Profile?
  shoppingLists ShoppingList[]
  contributions ProductContribution[]
  notifications Notification[]
}

model Profile {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  points      Int       @default(0)
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  city        String
  address     String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id                  String               @id @default(uuid())
  name                String               @unique
  description         String?
  category            ProductCategory
  units               String[]
  isTypicallyBranded  Boolean              @default(false)
  brandProducts       BrandProduct[]
  supermarketProducts SupermarketProduct[]
  shoppingListItems   ShoppingListItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Brand {
  id            String         @id @default(uuid())
  name          String         @unique
  logo          String?
  brandProducts BrandProduct[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model BrandProduct {
  id                  String               @id @default(uuid())
  brand               Brand                @relation(fields: [brandId], references: [id])
  brandId             String
  product             Product              @relation(fields: [productId], references: [id])
  productId           String
  supermarketProducts SupermarketProduct[]
  shoppingListItems   ShoppingListItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([brandId, productId])
}

model Supermarket {
  id                  String               @id @default(uuid())
  name                String
  franchise           Franchise?           @relation(fields: [franchiseId], references: [id])
  franchiseId         String?
  openingHours        Json
  phoneNumber         String?
  address             String?
  city                String
  website             String?
  latitude            Float?
  longitude           Float?
  supermarketProducts SupermarketProduct[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([name, address])
}

model SupermarketProduct {
  id             String                @id @default(uuid())
  supermarket    Supermarket           @relation(fields: [supermarketId], references: [id])
  supermarketId  String
  product        Product               @relation(fields: [productId], references: [id])
  productId      String
  brandProduct   BrandProduct?         @relation(fields: [brandProductId], references: [id])
  brandProductId String?
  unit           String
  price          Float
  inStock        Boolean               @default(true)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  contributions  ProductContribution[]

  @@unique([supermarketId, productId, brandProductId])
}

model Franchise {
  id          String        @id @default(uuid())
  name        String        @unique
  logo        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  Supermarket Supermarket[]
}

model ShoppingList {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  isActive  Boolean            @default(true)
  items     ShoppingListItem[]
  totalCost Float?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ShoppingListItem {
  id             String        @id @default(uuid())
  shoppingList   ShoppingList  @relation(fields: [shoppingListId], references: [id])
  shoppingListId String
  product        Product       @relation(fields: [productId], references: [id])
  productId      String
  brandProduct   BrandProduct? @relation(fields: [brandProductId], references: [id])
  brandProductId String?
  quantity       Float
  unit           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductContribution {
  id                   String             @id @default(uuid())
  user                 User               @relation(fields: [userId], references: [id])
  userId               String
  supermarketProduct   SupermarketProduct @relation(fields: [supermarketProductId], references: [id])
  supermarketProductId String
  type                 ContributionType
  oldValue             Json? // For storing previous price or availability
  newValue             Json // For storing new price, availability, or other details
  createdAt            DateTime           @default(now())

  @@index([supermarketProductId, type, createdAt])
  @@index([userId, type])
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId, isRead])
}
